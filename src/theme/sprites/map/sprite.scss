// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$baidumap-name: 'baidumap';
$baidumap-x: 0px;
$baidumap-y: 0px;
$baidumap-offset-x: 0px/2;
$baidumap-offset-y: 0px/2;
$baidumap-width: 178px/2;
$baidumap-height: 128px/2;
$baidumap-total-width: 360px/2;
$baidumap-total-height: 260px/2;
$baidumap-image: '~@/assets/sprites/map/sprite.png';
$baidumap: (0px, 0px, 0px/2, 0px/2, 178px/2, 128px/2, 360px/2, 260px/2, '~@/assets/sprites/map/sprite.png', 'baidumap', );
$encmap-name: 'encmap';
$encmap-x: 0px;
$encmap-y: 132px;
$encmap-offset-x: 0px/2;
$encmap-offset-y: -132px/2;
$encmap-width: 176px/2;
$encmap-height: 128px/2;
$encmap-total-width: 360px/2;
$encmap-total-height: 260px/2;
$encmap-image: '~@/assets/sprites/map/sprite.png';
$encmap: (0px, 132px, 0px/2, -132px/2, 176px/2, 128px/2, 360px/2, 260px/2, '~@/assets/sprites/map/sprite.png', 'encmap', );
$esri-name: 'esri';
$esri-x: 180px;
$esri-y: 132px;
$esri-offset-x: -180px/2;
$esri-offset-y: -132px/2;
$esri-width: 176px/2;
$esri-height: 128px/2;
$esri-total-width: 360px/2;
$esri-total-height: 260px/2;
$esri-image: '~@/assets/sprites/map/sprite.png';
$esri: (180px, 132px, -180px/2, -132px/2, 176px/2, 128px/2, 360px/2, 260px/2, '~@/assets/sprites/map/sprite.png', 'esri', );
$gaode-name: 'gaode';
$gaode-x: 182px;
$gaode-y: 0px;
$gaode-offset-x: -182px/2;
$gaode-offset-y: 0px/2;
$gaode-width: 178px/2;
$gaode-height: 128px/2;
$gaode-total-width: 360px/2;
$gaode-total-height: 260px/2;
$gaode-image: '~@/assets/sprites/map/sprite.png';
$gaode: (182px, 0px, -182px/2, 0px/2, 178px/2, 128px/2, 360px/2, 260px/2, '~@/assets/sprites/map/sprite.png', 'gaode', );
$spritesheet-width: 360px;
$spritesheet-height: 260px;
$spritesheet-image: '~@/assets/sprites/map/sprite.png';
$spritesheet-sprites: ($baidumap, $encmap, $esri, $gaode, );
$spritesheet: (360px, 260px, '~@/assets/sprites/map/sprite.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-background-size($sprite) {
  background-size: nth($sprite, 7) nth($sprite, 8);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}


@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
  @include sprite-background-size($sprite);
  background-repeat: no-repeat;
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
